# python3 manage.py shell

from profiles.models import User, UserProfiles

users = User.objects.all()
'''
>>> users
<QuerySet [<User: (1) Matheus Richard Neri Gomes>]>
>>> users
<QuerySet [<User: (1) Matheus Richard Neri Gomes>, <User: (2) Giselle Santos>]>
'''

users.order_by('-id')
'''
<QuerySet [<User: (2) Giselle Santos>, <User: (1) Matheus Richard Neri Gomes>]>
'''

users.order_by('-id', 'complete_name')
'''
<QuerySet [<User: (2) Giselle Santos>, <User: (1) Matheus Richard Neri Gomes>]>
'''

for u in users: 
    print(u.id, u.complete_name)
'''
1 Matheus Richard Neri Gomes
2 Giselle Santos
'''

for u in users.order_by('-id'): 
    print(u.id, u.complete_name)
'''
2 Giselle Santos
1 Matheus Richard Neri Gomes
'''

users.order_by('id').first()
'''
<User: (2) Matheus Richard Neri Gomes>
'''

users.order_by('-id').first()
'''
<User: (2) Giselle Santos>
'''

pessoa = users.order_by('-id').first()
'''
>>> pessoa
<User: (2) Giselle Santos>
'''

pessoa._meta.get_fields()
'''
(<ManyToOneRel: profiles.userroles>, <ManyToOneRel: profiles.userprofiles>, <ManyToOneRel: profiles.isumadjaf>, <django.db.models.fields.BigAutoField: id>, <django.db.models.fields.CharField: complete_name>, <django.db.models.fields.CharField: number_phone>, <django.db.models.fields.DateField: birthday>, <django.db.models.fields.CharField: password>, <django.db.models.fields.CharField: church>, <django.db.models.fields.BooleanField: is_umadjaf>, <django.db.models.fields.DateTimeField: created_at>, <django.db.models.fields.DateTimeField: updated_at>)
'''

                        >>> pessoa._meta.get_fields()[0]
                        <ManyToOneRel: profiles.userroles>
                        >>> pessoa._meta.get_fields()[0].name
                        'userroles'
                        >>> pessoa.pessoa._meta.get_fields()[0].name
                        Traceback (most recent call last):
                        File "<console>", line 1, in <module>
                        AttributeError: 'User' object has no attribute 'pessoa'
                        >>> getattr(pessoa, pessoa._meta.get_fields()[0].name)
                        Traceback (most recent call last):
                        File "<console>", line 1, in <module>
                        AttributeError: 'User' object has no attribute 'userroles'. Did you mean: 'userroles_set'?
                        >>> getattr(pessoa, pessoa._meta.get_fields()[3].name) | Retorna o valor do campo
                        2
                        >>> pessoa.pessoa._meta.get_fields()[3].name
                        Traceback (most recent call last):
                        File "<console>", line 1, in <module>
                        AttributeError: 'User' object has no attribute 'pessoa'
                        >>> pessoa._meta.get_fields()[3].name
                        'id'
                        >>> 
                        >>> users.order_by('-id').first()
                        <User: (2) Giselle Santos>
                        >>> pessoa = users.order_by('-id').first() | Retorna o primeiro objeto do QuerySet
                        <User: (2) Giselle Santos>
                        >>> pessoa._meta.get_fields() | Retorna todos os campos do objeto
                        (<ManyToOneRel: profiles.userroles>, <ManyToOneRel: profiles.userprofiles>, <ManyToOneRel: profiles.isumadjaf>, <django.db.models.fields.BigAutoField: id>, <django.db.models.fields.CharField: complete_name>, <django.db.models.fields.CharField: number_phone>, <django.db.models.fields.DateField: birthday>, <django.db.models.fields.CharField: password>, <django.db.models.fields.CharField: church>, <django.db.models.fields.BooleanField: is_umadjaf>, <django.db.models.fields.DateTimeField: created_at>, <django.db.models.fields.DateTimeField: updated_at>)
                        >>> new_user = User() | Cria um novo objeto
                        >>> new_user
                        <User: (None) >
                        >>> new_user.complete_name = 'Elyakim' | Adiciona um valor ao campo
                        >>> new_user
                        <User: (None) Elyakim>
                        >>> new_user.id = 3 | Adiciona um valor ao campo
                        >>> new_user
                        <User: (3) Elyakim>
                        >>> new_user.birthday = '2001-01-01' | Adiciona um valor ao campo
                        >>> new_user.save() | Salva no banco de dados
                        >>> 
                        >>> new_user = User.objects.create(complete_name='Will', birthday='1999-01-01', number_phone='11111511111') | Cria um novo objeto e salva no banco de dados
                        >>> new_user.name = 'Teste' | Adiciona um valor ao campo
                        >>> new_user.save()
                        >>> outro = User.objects.get(id=1)
                        >>> outro
                        <User: (1) Matheus Richard Neri Gomes>
                        >>> outro.complete_name = 'Matheus Richard'
                        >>> outro.save() | Salva no banco de dados
                        >>> outro
                        <User: (1) Matheus Richard>
                        >>> 
                        >>> usuarios
                        <QuerySet [<User: (1) Matheus Richard>, <User: (2) Giselle Santos>, <User: (3) Elyakim>, <User: (4) Will>]>
                        >>> for u in usuarios: print(u)
                        ... 
                        (1) Matheus Richard
                        (2) Giselle Santos
                        (3) Elyakim
                        (4) Will
                        >>> usuarios.first()
                        <User: (1) Matheus Richard>
                        >>> usuarios = User.objects.get(id=4)  | Pode retornar mais de um objeto, se não tiver nada, retorna um erro
                        >>> usuarios
                        <User: (4) Will>
                        >>> usuarios = User.objects.filter(id=4) | Retorna um QuerySet com um objeto, se não tiver nada, retorna um QuerySet vazio
                        >>> usuarios
                        <User: (4) Will>
                        >>> usuarios = User.objects.get(id=4).delete() | Deleta o objeto
